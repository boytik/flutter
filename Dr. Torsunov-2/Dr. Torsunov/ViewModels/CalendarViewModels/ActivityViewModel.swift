import SwiftUI

@MainActor
final class ActivityViewModel: ObservableObject {
    @Published var activities: [Activity] = []
    @Published var isLoading = false
    @Published var errorMessage: String?

    private let repository: ActivityRepository
    private let ns = "activities"                 // namespace –¥–ª—è KVStore
    private let kvKeyAll = "all"                  // –∫–ª—é—á —Å–ø–∏—Å–∫–∞
    private let kvTTL: TimeInterval = 60 * 10     // 10 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω–∞

    init(repository: ActivityRepository = ActivityRepositoryImpl()) {
        self.repository = repository
        Task { await load() }
    }

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:
    /// 1) –ø—Ä–æ–±—É–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω –∏–∑ KVStore (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI
    /// 2) –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ç—è–Ω–µ—Ç –∏–∑ —Å–µ—Ç–∏ (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç CachedHTTPClient)
    /// 3) –ø–æ –ø—Ä–∏—Ö–æ–¥—É —Å–µ—Ç–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ KVStore –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI
    func load() async {
        isLoading = true
        errorMessage = nil

        // 1) –æ—Ñ—Ñ–ª–∞–π–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        if let cached: [Activity] = try? KVStore.shared.get([Activity].self, namespace: ns, key: kvKeyAll) {
            print("üì¶ KVStore HIT \(ns)/\(kvKeyAll) (\(cached.count) –∑–∞–ø–∏—Å–µ–π)")
            self.activities = cached
        }

        // 2) —Å–µ—Ç—å
        do {
            print("üåê fetch activities –∏–∑ —Å–µ—Ç–∏‚Ä¶")
            let fresh = try await repository.fetchAll()
            self.activities = fresh

            // 3) —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω
            try? KVStore.shared.put(fresh, namespace: ns, key: kvKeyAll, ttl: kvTTL)
            print("üíæ KVStore SAVE \(ns)/\(kvKeyAll) (\(fresh.count) –∑–∞–ø–∏—Å–µ–π, ttl \(Int(kvTTL))s)")
        } catch {
            // –µ—Å–ª–∏ —Å–µ—Ç–∏ –Ω–µ—Ç –∏ –æ—Ñ—Ñ–ª–∞–π–Ω–∞ –Ω–µ –±—ã–ª–æ ‚Äî –ø–æ–∫–∞–∂–µ–º –æ—à–∏–±–∫—É
            if activities.isEmpty {
                self.errorMessage = error.localizedDescription
                print("‚ùå activities fetch error: \(error.localizedDescription)")
            } else {
                print("‚ö†Ô∏è activities fetch error (–ø–æ–∫–∞–∑–∞–Ω –æ—Ñ—Ñ–ª–∞–π–Ω): \(error.localizedDescription)")
            }
        }

        isLoading = false
    }

    func upload(activity: Activity) async {
        errorMessage = nil
        do {
            try await repository.upload(activity: activity)
            // –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à/–æ—Ñ—Ñ–ª–∞–π–Ω
            await load()
        } catch {
            errorMessage = error.localizedDescription
            print("‚ùå upload error: \(error.localizedDescription)")
        }
    }

    func submit(activityId: String,
                comment: String?,
                beforeImage: UIImage?,
                afterImage: UIImage?) async {
        errorMessage = nil
        do {
            try await repository.submit(activityId: activityId,
                                        comment: comment,
                                        beforeImage: beforeImage,
                                        afterImage: afterImage)
            // –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
            await load()
        } catch {
            errorMessage = error.localizedDescription
            print("‚ùå submit error: \(error.localizedDescription)")
        }
    }

    // MARK: - Debug helpers (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ UI)
    func clearOffline() {
        try? KVStore.shared.delete(namespace: ns, key: kvKeyAll)
        print("üßπ KVStore DELETE \(ns)/\(kvKeyAll)")
    }
}

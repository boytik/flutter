import Foundation
import SwiftUI

// MARK: - –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å
private actor ThumbsPrefetchState {
    private var inFlight = Set<String>()

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –º—ã –≤–∑—è–ª–∏ id –≤ —Ä–∞–±–æ—Ç—É (–∏ —Ä–∞–Ω—å—à–µ –µ–≥–æ –Ω–µ –±—Ä–∞–ª–∏)
    func start(_ id: String) -> Bool {
        if inFlight.contains(id) { return false }
        inFlight.insert(id)
        return true
    }

    func finish(_ id: String) {
        inFlight.remove(id)
    }
}

// MARK: - –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫—ç—à –∫–ª—é—á–µ–π —Å TTL (–¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è 500)
private actor NegativeKeyCache {
    private var store: [String: Date] = [:]
    private let ttl: TimeInterval

    init(ttl: TimeInterval = 300) { // 5 –º–∏–Ω—É—Ç
        self.ttl = ttl
    }

    func contains(_ key: String) -> Bool {
        if let ts = store[key], Date().timeIntervalSince(ts) < ttl { return true }
        store.removeValue(forKey: key)
        return false
    }

    func noteFailure(_ key: String) {
        store[key] = Date()
    }

    func clear() { store.removeAll() }
}

// MARK: - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–µ–≤—å—é
protocol ActivityThumbsRepository {
    func fetchThumbURL(workoutKey: String, email: String) async throws -> URL?
}

final class ActivityThumbsRepositoryImpl: ActivityThumbsRepository {
    private static let failCache = NegativeKeyCache(ttl: 300)
    private static let logEnabled = true

    private struct MetadataDTO: Codable {
        let activityGraph: String?
        let heartRateGraph: String?
        let map: String?
        let photoBefore: String?
        let photoAfter: String?

        enum CodingKeys: String, CodingKey {
            case activityGraph = "activity_graph"
            case heartRateGraph
            case map
            case photoBefore = "photo_before"
            case photoAfter  = "photo_after"
        }
    }

    func fetchThumbURL(workoutKey: String, email: String) async throws -> URL? {
        // –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—É—á–∏–ª–∏ 500 ‚Äî –ø–æ–¥–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
        if await Self.failCache.contains(workoutKey) {
            if Self.logEnabled { print("‚è≠Ô∏è thumbs skip (cached 500) for \(workoutKey)") }
            return nil
        }

        let url = ApiRoutes.Workouts.metadata(workoutKey: workoutKey, email: email)

        do {
            // –∫–æ—Ä–æ—Ç–∫–∏–π TTL –¥–ª—è –ø—Ä–µ–≤—å—é
            let meta: MetadataDTO = try await CachedHTTPClient.shared.request(url, ttl: 60)

            // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            let candidates = [meta.photoAfter, meta.photoBefore, meta.activityGraph, meta.heartRateGraph, meta.map]
            for s in candidates {
                if let s, !s.isEmpty {
                    if let u = URL(string: s), u.scheme != nil { return u }
                    if s.hasPrefix("/") { return URL(string: s, relativeTo: APIEnv.baseURL) }
                }
            }
            return nil
        } catch {
            // –ø–æ–¥–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ HTTP 500
            if case let NetworkError.server(status, _) = error, status == 500 {
                await Self.failCache.noteFailure(workoutKey)
                if Self.logEnabled { print("üö´ thumbs 500 cached for \(workoutKey) ‚Äî suppressed for 5m") }
                return nil
            }
            throw error
        }
    }
}

// -------------------------------------------------------------

@MainActor
final class CalendarViewModel: ObservableObject {

    enum PickersModes: String, CaseIterable { case calendar = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"; case history = "–ò—Å—Ç–æ—Ä–∏—è" }
    enum HistoryFilter: String, CaseIterable { case completed = "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"; case all = "–í—Å–µ" }

    // –ê–Ω—Ç–∏–¥—É–±–ª—å –∏ –ª–∏–º–∏—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ñ–µ—Ç—á–∞
    private static let thumbsState = ThumbsPrefetchState()
    private let maxThumbsPrefetch = 12

    @Published var role: PersonalViewModel.Role = .user
    @Published var pickerMode: PickersModes = .calendar
    // —Å—Ç–∞—Ä—Ç—É–µ–º —Å "–í—Å–µ", —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Å—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞, –µ—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö
    @Published var historyFilter: HistoryFilter = .all { didSet { rebuildHistory() } }

    @Published var monthDates: [WorkoutDay] = []
    @Published var currentMonthDate: Date = Date()
    @Published var byDay: [Date: [CalendarItem]] = [:]

    @Published var filteredItems: [CalendarItem] = []
    @Published var thumbs: [String: URL] = [:]

    private var monthPlanned: [Workout] = []
    private var monthActivities: [Activity] = []
    private var allActivities: [Activity] = []
    private var inspectorActivities: [Activity] = []

    private let workoutPlannerRepo: WorkoutPlannerRepository
    private let inspectorRepo: InspectorRepository
    private let activitiesRepo: ActivityRepository
    private let thumbsRepo: ActivityThumbsRepository

    @Published var inspectorTypeFilter: String? = nil
    var inspectorTypes: [String] {
        let set = Set(inspectorActivities.compactMap { normalizedType($0.name) })
        return Array(set).sorted()
    }

    init(workoutPlannerRepo: WorkoutPlannerRepository = WorkoutPlannerRepositoryImpl(),
         inspectorRepo: InspectorRepository = InspectorRepositoryImpl(),
         activitiesRepo: ActivityRepository = ActivityRepositoryImpl(),
         thumbsRepo: ActivityThumbsRepository = ActivityThumbsRepositoryImpl()) {
        self.workoutPlannerRepo = workoutPlannerRepo
        self.inspectorRepo = inspectorRepo
        self.activitiesRepo = activitiesRepo
        self.thumbsRepo = thumbsRepo
    }

    // MARK: Public API
    func reload(role: PersonalViewModel.Role) async {
        self.role = role
        switch role {
        case .user:      await loadCalendarForMonth(currentMonthDate)
        case .inspector: await loadInspector()
        }
    }

    var currentMonth: String {
        let f = DateFormatter(); f.locale = Locale.current
        f.setLocalizedDateFormatFromTemplate("LLLL yyyy")
        return f.string(from: currentMonthDate).capitalized
    }

    func previousMonth() {
        guard let d = Calendar.current.date(byAdding: .month, value: -1, to: currentMonthDate) else { return }
        currentMonthDate = d
        Task { await loadCalendarForMonth(d) }
    }

    func nextMonth() {
        guard let d = Calendar.current.date(byAdding: .month, value: 1, to: currentMonthDate) else { return }
        currentMonthDate = d
        Task { await loadCalendarForMonth(d) }
    }

    func items(on date: Date) -> [CalendarItem] {
        byDay[Calendar.current.startOfDay(for: date)] ?? []
    }

    func thumbFor(_ item: CalendarItem) -> URL? {
        if case let .activity(a) = item { return thumbs[a.id] }
        return nil
    }

    // MARK: USER
    private func loadCalendarForMonth(_ monthDate: Date) async {
        guard let email = TokenStorage.shared.currentEmail(), !email.isEmpty else {
            reset()
            return
        }

        let yyyyMM = Self.yyyyMM.string(from: monthDate)
        let (startD, endD) = monthRangeDates(monthDate)
        let cal = Calendar.current

        // –æ—Ñ—Ñ–ª–∞–π–Ω (CoreData KVStore)
        if let cached: [Workout] = try? KVStore.shared.get([Workout].self, namespace: "calendar", key: "planner_\(yyyyMM)") {
            print("üì¶ KVStore HIT planner_\(yyyyMM) (\(cached.count) –∑–∞–ø–∏—Å–µ–π)")
            self.monthPlanned = cached
        }
        if let cachedActs: [Activity] = try? KVStore.shared.get([Activity].self, namespace: "calendar", key: "activities_all") {
            print("üì¶ KVStore HIT activities_all (\(cachedActs.count) –∑–∞–ø–∏—Å–µ–π)")
            self.allActivities = cachedActs
        }

        do {
            print("üåê fetch planner & activities –∏–∑ —Å–µ—Ç–∏‚Ä¶")

            // –ü–ª–∞–Ω –º–µ—Å—è—Ü–∞
            let plannerDTOs = try await workoutPlannerRepo.getPlannerCalendar(filterMonth: yyyyMM)
            let planned: [Workout] = plannerDTOs.compactMap { dto in
                guard let date = Self.parseDate(dto.date) else { return nil }
                // –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–∞—Ç–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
                guard date >= cal.startOfDay(for: startD),
                      date <= cal.date(bySettingHour: 23, minute: 59, second: 59, of: endD)! else { return nil }
                let minutes = (dto.durationHours ?? 0) * 60 + (dto.durationMinutes ?? 0)
                let name = dto.activityType ?? "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
                return Workout(
                    id: dto.workoutUuid ?? UUID().uuidString,
                    name: name,
                    description: dto.description,
                    duration: minutes,
                    date: date
                )
            }
            self.monthPlanned = planned
            try? KVStore.shared.put(planned, namespace: "calendar", key: "planner_\(yyyyMM)", ttl: 60*60*24)
            print("üíæ KVStore SAVE planner_\(yyyyMM) (\(planned.count) –∑–∞–ø–∏—Å–µ–π)")

            // –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
            let allActs = try await activitiesRepo.fetchAll()
            self.allActivities = allActs
            try? KVStore.shared.put(allActs, namespace: "calendar", key: "activities_all", ttl: 60*10)
            print("üíæ KVStore SAVE activities_all (\(allActs.count) –∑–∞–ø–∏—Å–µ–π)")

            // –§–∏–ª—å—Ç—Ä –º–µ—Å—è—Ü–∞
            let monthActs = allActs.filter { a in
                guard let dt = a.createdAt else { return false }
                return dt >= cal.startOfDay(for: startD) &&
                       dt <= cal.date(bySettingHour: 23, minute: 59, second: 59, of: endD)!
            }
            self.monthActivities = monthActs

            // –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ –¥–Ω—è–º
            let workoutItems  = planned.map { CalendarItem.workout($0) }
            let activityItems = monthActs.map { CalendarItem.activity($0) }
            self.byDay = Dictionary(grouping: (workoutItems + activityItems)) {
                cal.startOfDay(for: $0.date)
            }

            // –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞ —Å–µ—Ç–∫—É
            self.monthDates = buildMarkers(for: monthDate, planned: planned, done: monthActs)

            // –ò—Å—Ç–æ—Ä–∏—è
            rebuildHistory()

            // Fallback: –µ—Å–ª–∏ ¬´–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ¬ª –ø—É—Å—Ç–æ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ ¬´–í—Å–µ¬ª
            if filteredItems.isEmpty, historyFilter == .completed, !allActivities.isEmpty {
                historyFilter = .all
                rebuildHistory()
            }

            print("üì∑ prefetch thumbs‚Ä¶")
            await prefetchThumbs(for: filteredItems.prefix(24))

        } catch {
            print("‚ùå Calendar load error:", error.localizedDescription)
            reset()
        }
    }

    private func reset() {
        monthPlanned = []; monthActivities = []; allActivities = []
        monthDates = []; byDay = [:]; filteredItems = []; thumbs = [:]
    }

    private func rebuildHistory() {
        switch historyFilter {
        case .completed:
            filteredItems = monthActivities.map { .activity($0) }.sorted { $0.date > $1.date }
        case .all:
            filteredItems = allActivities.map { .activity($0) }.sorted { $0.date > $1.date }
        }
    }

    // MARK: Prefetch –ø—Ä–µ–≤—å—é –±–µ–∑ –¥—É–±–ª–µ–π –∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    private func prefetchThumbs<S: Sequence>(for items: S) async where S.Element == CalendarItem {
        guard let email = TokenStorage.shared.currentEmail(), !email.isEmpty else { return }

        // –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: —Ç–æ–ª—å–∫–æ activity, –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ URL, –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ
        var ids: [String] = []
        for item in items {
            guard case let .activity(a) = item else { continue }
            if thumbs[a.id] != nil { continue }
            if await CalendarViewModel.thumbsState.start(a.id) {
                ids.append(a.id)
                if ids.count >= maxThumbsPrefetch { break }
            }
        }
        guard !ids.isEmpty else { return }

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ç—è–Ω–µ–º, –Ω–æ –±–µ–∑ –¥—É–±–ª–µ–π; –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–Ω–∏–º–∞–µ–º –∏–∑ inFlight
        await withTaskGroup(of: (String, URL?).self) { group in
            for id in ids {
                group.addTask { [thumbsRepo] in
                    let url = try? await thumbsRepo.fetchThumbURL(workoutKey: id, email: email)
                    await CalendarViewModel.thumbsState.finish(id)
                    return (id, url)
                }
            }

            var new: [String: URL] = [:]
            for await (id, url) in group {
                if let url { new[id] = url }
            }
            if !new.isEmpty {
                thumbs.merge(new) { old, _ in old } // –Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
            }
        }
    }

    // MARK: INSPECTOR
    private func loadInspector() async {
        do {
            async let a: [Activity] = inspectorRepo.getActivitiesForCheck()
            async let b: [Activity] = inspectorRepo.getActivitiesFullCheck()
            let (toCheck, full) = try await (a, b)

            // –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –Ω–∞ –¥—É–±–ª—è—Ö id
            var dedup: [String: Activity] = [:]
            for x in toCheck { if dedup[x.id] == nil { dedup[x.id] = x } }
            for x in full    { if dedup[x.id] == nil { dedup[x.id] = x } }

            inspectorActivities = Array(dedup.values)

            applyInspectorFilter()
            monthDates = buildMarkers(for: currentMonthDate, planned: [], done: inspectorActivities)
        } catch {
            print("Inspector load error:", error.localizedDescription)
            await loadInspectorActivitiesFallback()
        }
    }

    private func loadInspectorActivitiesFallback() async {
        do {
            let acts = try await activitiesRepo.fetchAll()
            inspectorActivities = acts
            applyInspectorFilter()
            monthDates = buildMarkers(for: currentMonthDate, planned: [], done: acts)
        } catch {
            inspectorActivities = []
            filteredItems = []
            monthDates = []
        }
    }

    func setInspectorFilter(_ type: String?) { inspectorTypeFilter = type; applyInspectorFilter() }
    private func applyInspectorFilter() {
        var base = inspectorActivities
        if let t = inspectorTypeFilter { base = base.filter { normalizedType($0.name) == t } }
        filteredItems = base.map { .activity($0) }.sorted { $0.date > $1.date }
    }
    private func normalizedType(_ raw: String?) -> String? {
        guard let s = raw?.lowercased() else { return nil }
        if s.contains("yoga") || s.contains("–π–æ–≥–∞") { return "–ô–æ–≥–∞" }
        if s.contains("water") || s.contains("–≤–æ–¥–∞") || s.contains("swim") { return "–í–æ–¥–∞" }
        if s.contains("walk") || s.contains("run") || s.contains("—Ö–æ–¥") || s.contains("–±–µ–≥") { return "–ë–µ–≥/–•–æ–¥—å–±–∞" }
        if s.contains("sauna") || s.contains("–±–∞–Ω—è") { return "–ë–∞–Ω—è" }
        if s.contains("fast")  || s.contains("–ø–æ—Å—Ç") { return "–ü–æ—Å—Ç" }
        return nil
    }

    // MARK: Helpers
    private func buildMarkers(for monthDate: Date, planned: [Workout], done: [Activity]) -> [WorkoutDay] {
        var cal = Calendar(identifier: .iso8601)
        cal.firstWeekday = 2

        guard
            let start = cal.date(from: cal.dateComponents([.year, .month], from: monthDate)),
            let range = cal.range(of: .day, in: .month, for: monthDate)
        else { return [] }

        let plannedG: [Date: [Color]] = Dictionary(grouping: planned) {
            cal.startOfDay(for: $0.date)
        }.mapValues { $0.map { Self.color(for: $0.name) } }

        let doneDays: Set<Date> = Set(done.compactMap { a in
            a.createdAt.map { cal.startOfDay(for: $0) }
        })

        return range.compactMap { day -> WorkoutDay? in
            guard let date = cal.date(byAdding: .day, value: day - 1, to: start) else { return nil }
            let d = cal.startOfDay(for: date)
            var colors = plannedG[d] ?? []
            colors = Array(colors.prefix(6))
            if doneDays.contains(d), colors.count < 6 { colors.append(.green) }
            return WorkoutDay(date: date, dots: colors)
        }
    }

    private static func color(for name: String) -> Color {
        let s = name.lowercased()
        if s.contains("yoga") || s.contains("–π–æ–≥–∞") { return .purple }
        if s.contains("walk") || s.contains("run") || s.contains("—Ö–æ–¥") || s.contains("–±–µ–≥") { return .orange }
        if s.contains("water") || s.contains("–≤–æ–¥–∞") || s.contains("swim") { return .blue }
        if s.contains("sauna") || s.contains("–±–∞–Ω—è") { return .red }
        if s.contains("fast") || s.contains("–ø–æ—Å—Ç") { return .yellow }
        return .green
    }

    private func monthRangeDates(_ monthDate: Date) -> (Date, Date) {
        var cal = Calendar(identifier: .iso8601); cal.firstWeekday = 2
        let start = cal.date(from: cal.dateComponents([.year, .month], from: monthDate))!
        let end = cal.date(byAdding: DateComponents(month: 1, day: -1), to: start)!
        return (start, end)
    }

    private static let yyyyMM: DateFormatter = {
        let f = DateFormatter(); f.locale = .init(identifier: "en_US_POSIX")
        f.timeZone = .init(secondsFromGMT: 0); f.dateFormat = "yyyy-MM"; return f
    }()

    private static func parseDate(_ s: String?) -> Date? {
        guard let s = s, !s.isEmpty else { return nil }
        if let d = dfDateTimeISO.date(from: s) { return d }
        if let d = dfDateTimeSpace.date(from: s) { return d }
        if let d = dfDate.date(from: s) { return d }
        return nil
    }
    private static let dfDateTimeISO: DateFormatter = {
        let f = DateFormatter(); f.locale = .init(identifier: "en_US_POSIX")
        f.timeZone = .current; f.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"; return f
    }()
    private static let dfDateTimeSpace: DateFormatter = {
        let f = DateFormatter(); f.locale = .init(identifier: "en_US_POSIX")
        f.timeZone = .current; f.dateFormat = "yyyy-MM-dd HH:mm:ss"; return f
    }()
    private static let dfDate: DateFormatter = {
        let f = DateFormatter(); f.locale = .init(identifier: "en_US_POSIX")
        f.timeZone = .current; f.dateFormat = "yyyy-MM-dd"; return f
    }()
}

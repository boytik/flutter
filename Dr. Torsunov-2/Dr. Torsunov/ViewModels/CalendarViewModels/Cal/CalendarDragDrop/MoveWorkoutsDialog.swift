import SwiftUI
import OSLog

private let log = Logger(subsystem: Bundle.main.bundleIdentifier ?? "app",
                         category: "MoveWorkoutsDialog")

/// –î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
/// –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É
struct MoveWorkoutsDialog: View {
    let title: String
    let workouts: [Workout]
    var onConfirm: (_ selectedIDs: [String]) -> Void
    var onCancel: () -> Void

    @State private var selected: Set<String> = []

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    /// - Parameters:
    ///   - title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
    ///   - workouts: –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    ///   - onConfirm: –ö–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ ID
    ///   - onCancel: –ö–æ–ª–±—ç–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    init(title: String = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
         workouts: [Workout],
         onConfirm: @escaping (_ selectedIDs: [String]) -> Void,
         onCancel: @escaping () -> Void) {
        
        log.info("üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MoveWorkoutsDialog...")
        log.debug("üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: '\(title, privacy: .public)'")
        log.debug("üí™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: \(workouts.count)")
        
        self.title = title
        self.workouts = workouts
        self.onConfirm = onConfirm
        self.onCancel = onCancel
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        let allIDs = Set(workouts.map(\.id))
        self._selected = State(initialValue: allIDs)
        
        log.debug("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: \(allIDs.count) —à—Ç.")
        for (index, workout) in workouts.enumerated() {
            log.debug("üí™ [\(index)]: '\(workout.name, privacy: .public)' (ID: \(workout.id, privacy: .public), —Ç–∏–ø: \(workout.activityType ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))")
        }
        
        log.info("‚úÖ MoveWorkoutsDialog –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    }

    /// –°–æ–∑–¥–∞—ë—Ç UI –¥–∏–∞–ª–æ–≥–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    var body: some View {
        log.debug("üé® –†–µ–Ω–¥–µ—Ä–∏–º MoveWorkoutsDialog...")
        
        return VStack(spacing: 16) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
            Text(title)
                .font(.headline)
                .onAppear {
                    log.debug("üìù –û—Ç–æ–±—Ä–∞–∂–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: '\(title, privacy: .public)'")
                }
            
            // –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            ScrollView {
                VStack(alignment: .leading, spacing: 8) {
                    ForEach(workouts, id: \.id) { workout in
                        Toggle(isOn: Binding(
                            get: {
                                let isSelected = selected.contains(workout.id)
                                log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ '\(workout.name, privacy: .public)': \(isSelected ? "–≤—ã–±—Ä–∞–Ω–∞" : "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")")
                                return isSelected
                            },
                            set: { newValue in
                                log.info("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ '\(workout.name, privacy: .public)': \(newValue ? "–≤—ã–±—Ä–∞—Ç—å" : "—Å–Ω—è—Ç—å")")
                                
                                if newValue {
                                    selected.insert(workout.id)
                                    log.debug("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤—ã–±–æ—Ä: \(workout.id, privacy: .public)")
                                } else {
                                    selected.remove(workout.id)
                                    log.debug("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤—ã–±–æ—Ä–∞: \(workout.id, privacy: .public)")
                                }
                                
                                log.debug("üìä –¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: \(selected.count) –∏–∑ \(workouts.count) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
                            })) {
                                VStack(alignment: .leading, spacing: 2) {
                                    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                                    Text(workout.name)
                                        .font(.body)
                                    
                                    // –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                                    if let activityType = workout.activityType {
                                        Text("–¢–∏–ø: \(activityType)")
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                    }
                                    
                                    // –î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                                    Text(DateUtils.ymd.string(from: workout.date))
                                        .font(.caption2)
                                        .foregroundColor(.secondary)
                                }
                            }
                            .toggleStyle(CheckboxToggleStyle())
                            .padding(.vertical, 6)
                            .onAppear {
                                log.debug("üéØ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: '\(workout.name, privacy: .public)' –Ω–∞ \(DateUtils.ymd.string(from: workout.date), privacy: .public)")
                            }
                    }
                }
                .padding(.horizontal, 2)
            }
            .onAppear {
                log.debug("üìú ScrollView —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂—ë–Ω")
            }
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            HStack {
                Button("–û—Ç–º–µ–Ω–∞") {
                    log.info("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'")
                    log.debug("üö´ –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
                    onCancel()
                }
                .onAppear {
                    log.debug("üîò –ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞' –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
                }
                
                Spacer()
                
                Button("–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å") {
                    let selectedArray = Array(selected)
                    log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: \(selectedArray.count) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
                    
                    for (index, id) in selectedArray.enumerated() {
                        log.debug("üöÄ [\(index)]: ID –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: \(id, privacy: .public)")
                    }
                    
                    if selectedArray.isEmpty {
                        log.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º –≤—ã–±–æ—Ä–æ–º (–∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
                    }
                    
                    onConfirm(selectedArray)
                }
                .buttonStyle(.borderedProminent)
                .disabled(selected.isEmpty)
                .onAppear {
                    log.debug("üîò –ö–Ω–æ–ø–∫–∞ '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å' –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞, –∞–∫—Ç–∏–≤–Ω–∞: \(!selected.isEmpty)")
                }
                .onChange(of: selected.isEmpty) { isEmpty in
                    log.debug("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å' –∏–∑–º–µ–Ω–µ–Ω–æ: \(isEmpty ? "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" : "–¥–æ—Å—Ç—É–ø–Ω–∞")")
                }
            }
            .onAppear {
                log.debug("üîò –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞")
            }
        }
        .padding(16)
        .frame(maxWidth: 420)
        .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 16))
        .shadow(radius: 10)
        .padding()
        .onAppear {
            log.info("üé® MoveWorkoutsDialog –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–æ–±—Ä–∞–∂—ë–Ω")
            logCurrentSelectionState()
        }
        .onDisappear {
            log.info("üëã MoveWorkoutsDialog —Å–∫—Ä—ã—Ç")
        }
    }
    
    /// –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    private func logCurrentSelectionState() {
        log.debug("üìä === –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ===")
        log.debug("üìä –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: \(workouts.count)")
        log.debug("üìä –í—ã–±—Ä–∞–Ω–æ: \(selected.count)")
        log.debug("üìä –ù–µ –≤—ã–±—Ä–∞–Ω–æ: \(workouts.count - selected.count)")
        
        if selected.isEmpty {
            log.debug("üìä ‚ùå –ù–∏ –æ–¥–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        } else if selected.count == workouts.count {
            log.debug("üìä ‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        } else {
            log.debug("üìä üîò –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let selectedWorkouts = workouts.filter { selected.contains($0.id) }
        let typeGroups = Dictionary(grouping: selectedWorkouts) { $0.activityType ?? "unknown" }
        let typeSummary = typeGroups.map { "\($0.key): \($0.value.count)" }.joined(separator: ", ")
        
        if !typeSummary.isEmpty {
            log.debug("üìä –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: \(typeSummary, privacy: .public)")
        }
    }
}

/// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∏–ª—å —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —á–µ–∫–±–æ–∫—Å —Å –≥–∞–ª–æ—á–∫–æ–π –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
struct CheckboxToggleStyle: ToggleStyle {
    
    /// –°–æ–∑–¥–∞—ë—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —á–µ–∫–±–æ–∫—Å–∞
    /// - Parameter configuration: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è toggle —ç–ª–µ–º–µ–Ω—Ç–∞
    /// - Returns: View —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —á–µ–∫–±–æ–∫—Å–∞
    func makeBody(configuration: Configuration) -> some View {
        log.debug("üé® –†–µ–Ω–¥–µ—Ä–∏–º CheckboxToggleStyle, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: \(configuration.isOn ? "–≤–∫–ª—é—á—ë–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω")")
        
        return Button(action: {
            log.debug("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞: \(configuration.isOn ? "–≤—ã–∫–ª—é—á–∞–µ–º" : "–≤–∫–ª—é—á–∞–µ–º")")
            configuration.isOn.toggle()
        }) {
            HStack {
                Image(systemName: configuration.isOn ? "checkmark.square.fill" : "square")
                    .foregroundColor(configuration.isOn ? .accentColor : .secondary)
                    .onAppear {
                        let iconName = configuration.isOn ? "checkmark.square.fill" : "square"
                        log.debug("üéØ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ —á–µ–∫–±–æ–∫—Å–∞: \(iconName)")
                    }
                
                configuration.label
                    .onAppear {
                        log.debug("üìù –û—Ç–æ–±—Ä–∞–∂–µ–Ω label —á–µ–∫–±–æ–∫—Å–∞")
                    }
            }
        }
        .buttonStyle(.plain)
        .onAppear {
            log.debug("‚úÖ CheckboxToggleStyle –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–æ–±—Ä–∞–∂—ë–Ω")
        }
    }
}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

extension Array where Element == Workout {
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ
    func logDialogWorkoutStats(prefix: String = "") {
        let typeGroups = Dictionary(grouping: self) { $0.activityType ?? "unknown" }
        let durationTotal = self.reduce(0) { $0 + $1.duration }
        let avgDuration = self.isEmpty ? 0 : durationTotal / self.count
        
        for (type, workouts) in typeGroups {
            let typeTotal = workouts.reduce(0) { $0 + $1.duration }
            log.debug("  üè∑Ô∏è \(type): \(workouts.count) —à—Ç., \(typeTotal) –º–∏–Ω")
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        let dateGroups = Dictionary(grouping: self) {
            DateUtils.ymd.string(from: $0.date)
        }
        
        if dateGroups.count <= 5 {
            for (date, workouts) in dateGroups.sorted(by: { $0.key < $1.key }) {
                log.debug("  üìÖ \(date): \(workouts.count) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
            }
        } else {
            log.debug("  üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: \(dateGroups.count) —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–Ω–µ–π")
        }
    }
}

extension Set where Element == String {
    /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID
    func logSelectionStats(prefix: String = "") {
        let protocolIDs = self.filter { $0.contains("|") }
        let regularIDs = self.filter { !$0.contains("|") }
        
        if !protocolIDs.isEmpty {
            log.debug("  üîó –ü—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–µ ID: \(protocolIDs.joined(separator: ", "), privacy: .public)")
        }
    }
}

import Foundation
import OSLog

private let log = Logger(subsystem: Bundle.main.bundleIdentifier ?? "app",
                         category: "CalendarMapping")

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
enum CalendarMapping {
    
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö—Å—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    /// - Parameter strings: –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–∑–≤–∞–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è, —Ç–∏–ø—ã)
    /// - Returns: –ö–ª—é—á —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ nil –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    static func inferTypeKey(from strings: [String?]) -> String? {
        
        let haystack = strings.compactMap { $0?.lowercased() }.joined(separator: " | ")
        
        guard !haystack.isEmpty else {
            return nil
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–≤–∞–Ω–∏–µ/–≤–æ–¥—É
        if haystack.contains("swim") || haystack.contains("–ø–ª–∞–≤") || haystack.contains("water") {
            return "swim"
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–≥/—Ö–æ–¥—å–±—É
        if haystack.contains("run") || haystack.contains("–±–µ–≥") || haystack.contains("walk") || haystack.contains("—Ö–æ–¥") {
            return "run"
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–ª–æ—Å–∏–ø–µ–¥
        if haystack.contains("bike") || haystack.contains("velo") || haystack.contains("–≤–µ–ª") || haystack.contains("cycl") {
            return "bike"
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –π–æ–≥—É/—Å–∏–ª–æ–≤—ã–µ
        if haystack.contains("yoga") || haystack.contains("–π–æ–≥–∞") || haystack.contains("strength") || haystack.contains("—Å–∏–ª") {
            return "yoga"
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω—é/—Å–∞—É–Ω—É
        if haystack.contains("sauna") || haystack.contains("–±–∞–Ω—è") || haystack.contains("—Ö–∞–º–º–∞–º") {
            return "sauna"
        }
        return nil
    }

    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DTO –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Ç–∏–ø–∞ "–≤–æ–¥–∞ ‚Üí –±–∞–Ω—è ‚Üí –≤–æ–¥–∞"
    /// - Parameter dto: DTO –æ–±—ä–µ–∫—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// - Returns: –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤)
    static func workouts(from dto: PlannerItemDTO) -> [Workout] {
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
        let rawDate = dto.date ?? dto.startDate ?? dto.plannedDate ?? dto.workoutDate
        
        guard let parsedDate = DateUtils.parse(rawDate) else {
            log.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑: '\(rawDate ?? "nil", privacy: .public)'")
            return []
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let minutes = (dto.durationHours ?? 0) * 60 + (dto.durationMinutes ?? 0)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID
        let baseID = dto.workoutUuid ?? dto.workoutKey ?? dto.id ?? UUID().uuidString
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        let visibleName = dto.name ?? dto.type ?? dto.description ?? "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let fromBackend = dto.activityType?.lowercased()
        let inferred = inferTypeKey(from: [dto.activityType, dto.type, dto.name, dto.description])
        let finalType = (fromBackend?.isEmpty == false ? fromBackend : inferred) ?? "other"

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª –±–∞–Ω–∏ —Å –≤–æ–¥–æ–π
        let waterArray = dto.swimLayers ?? []
        let saunaLayers = dto.layers ?? 0
        let isSaunaProtocol = finalType.contains("sauna") || finalType.contains("–±–∞–Ω—è")

        // --- –ü–†–û–¢–û–ö–û–õ: –±–∞–Ω—è + –≤–æ–¥–∞ —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞
        if isSaunaProtocol && (saunaLayers > 0 || !waterArray.isEmpty) {
            var result: [Workout] = []

            // –í–æ–¥–∞ —Å–ª–µ–≤–∞ (–¥–æ –±–∞–Ω–∏)
            if let waterLeft = waterArray.first, waterLeft > 0 {
                result.append(Workout(
                    id: baseID + "|water1",
                    name: visibleName,
                    description: dto.description,
                    duration: minutes,
                    date: parsedDate,
                    activityType: "water",
                    plannedLayers: min(5, waterLeft),
                    swimLayers: nil
                ))
            }

            // –ë–∞–Ω—è –≤ —Ü–µ–Ω—Ç—Ä–µ
            if saunaLayers > 0 {
                result.append(Workout(
                    id: baseID + "|sauna",
                    name: visibleName,
                    description: dto.description,
                    duration: minutes,
                    date: parsedDate,
                    activityType: "sauna",
                    plannedLayers: min(5, saunaLayers),
                    swimLayers: nil
                ))
            }

            // –í–æ–¥–∞ —Å–ø—Ä–∞–≤–∞ (–ø–æ—Å–ª–µ –±–∞–Ω–∏)
            if waterArray.count > 1, let waterRight = waterArray.dropFirst().first, waterRight > 0 {
                result.append(Workout(
                    id: baseID + "|water2",
                    name: visibleName,
                    description: dto.description,
                    duration: minutes,
                    date: parsedDate,
                    activityType: "water",
                    plannedLayers: min(5, waterRight),
                    swimLayers: nil
                ))
            }

            if !result.isEmpty {
                return result
            }
        }

        // –û–±—ã—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª)
        let singleWorkout = Workout(
            id: baseID,
            name: visibleName,
            description: dto.description,
            duration: minutes,
            date: parsedDate,
            activityType: finalType,
            plannedLayers: dto.layers,
            swimLayers: dto.swimLayers
        )
        return [singleWorkout]
    }

    /// –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ ID –∏–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–∞—Ç–∞+–Ω–∞–∑–≤–∞–Ω–∏–µ
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–∞ –ø–æ–¥—Ö–æ–¥–∞: –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –∏–ª–∏ –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –∫–ª—é—á—É –¥–∞—Ç–∞+–Ω–∞–∑–≤–∞–Ω–∏–µ
    /// - Parameter plans: –ú–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    /// - Returns: –ú–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    static func dedup(_ plans: [Workout]) -> [Workout] {
        log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é \(plans.count) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
        
        guard !plans.isEmpty else {
            log.debug("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏")
            return []
        }
        
        var byID: [String: Workout] = [:]
        var seenKeys: Set<String> = []
        var duplicatesCount = 0
        
        for workout in plans {
            if !workout.id.isEmpty {
                // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ ID
                if byID[workout.id] != nil {
                    duplicatesCount += 1
                } else {
                    byID[workout.id] = workout
                }
            } else {
                // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –∫–ª—é—á—É –¥–∞—Ç–∞+–Ω–∞–∑–≤–∞–Ω–∏–µ
                let dateString = DateUtils.ymd.string(from: workout.date)
                let key = dateString + "|" + workout.name.lowercased()
                
                if seenKeys.contains(key) {
                    duplicatesCount += 1
                } else {
                    seenKeys.insert(key)
                    byID[key] = workout
                }
            }
        }
        
        let result = Array(byID.values)
        log.info("‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: \(plans.count) ‚Üí \(result.count) (—É–¥–∞–ª–µ–Ω–æ \(duplicatesCount) –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)")
        
        return result
    }

    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –º–æ–¥–µ–ª—å Workout –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫—ç—à–∞
    /// - Parameter c: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    /// - Returns: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è UI
    static func workout(from c: CachedWorkout) -> Workout {
//        log.debug("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: '\(c.name, privacy: .public)' (ID: \(c.id, privacy: .public))")
        
        let workout = Workout(
            id: c.id,
            name: c.name,
            description: nil, // –í –∫—ç—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            duration: c.durationSec ?? 0,
            date: c.date,
            activityType: c.type,
            plannedLayers: nil, // –í –∫—ç—à–µ —Å–ª–æ–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
            swimLayers: nil
        )
        
        return workout
    }
}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

extension Array where Element == Workout {
    /// –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Å–∏–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ª–æ–≥
    func logWorkoutStats(prefix: String = "") {
        let typeGroups = Dictionary(grouping: self) { $0.activityType ?? "unknown" }
        let summary = typeGroups.map { "\($0.key): \($0.value.count)" }.joined(separator: ", ")
    }
}

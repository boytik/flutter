import Foundation
import OSLog

private let log = Logger(
    subsystem: Bundle.main.bundleIdentifier ?? "app",
    category: "MoveWorkoutsService"
)

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç API-–∑–∞–ø—Ä–æ—Å—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ñ–ª–∞–π–Ω-–∫—ç—à–∞
struct MoveWorkoutsService {

    // MARK: - Network (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload)

    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç).
    /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ `{ workout_uuid, date }`, –≥–¥–µ:
    ///  - `workout_uuid` ‚Äî –ë–ê–ó–û–í–´–ô UUID (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)
    ///  - `date` ‚Äî —Å—Ç—Ä–æ–∫–∞ `"yyyy-MM-dd HH:mm:ss"` –Ω–∞ –ø–æ–ª–Ω–æ—á—å —Ü–µ–ª–µ–≤–æ–≥–æ –¥–Ω—è
    func sendMoveRequest(email: String, targetDate: Date, selectedIDs: [String]) async throws {
        log.info("üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫‚Ä¶")
        log.debug("üë§ Email: \(email, privacy: .private)")

        // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–ª—É–Ω–æ—á—å -> "yyyy-MM-dd HH:mm:ss"
        let midnight = CalendarMath.iso.startOfDay(for: targetDate)
        let targetDateString = DateUtils.ymdhmsSp.string(from: midnight)

        log.debug("üìÖ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ (–ø–æ–ª–Ω–æ—á—å): \(targetDateString, privacy: .public)")
        log.debug("üÜî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: \(selectedIDs.count)")

        struct MoveItem: Codable {
            let workout_uuid: String
            let date: String  // "yyyy-MM-dd HH:mm:ss"
        }

        // ‚ö†Ô∏è –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–∞–º–∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ baseID
        let bodyItems: [MoveItem] = selectedIDs.map { id in
            let bid = baseID(from: id)
            log.debug("üì¶ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–ø—Ä–æ—Å ID: \(bid, privacy: .public) ‚Üí \(targetDateString, privacy: .public)")
            return MoveItem(workout_uuid: bid, date: targetDateString)
        }

        let apiURL = APIEnv.baseURL.appendingPathComponent("/workout_calendar/\(email)")
        log.debug("üåê URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: \(apiURL.absoluteString, privacy: .public)")

        var request = URLRequest(url: apiURL)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("application/json", forHTTPHeaderField: "Accept")     // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

        do {
            let body = try JSONEncoder().encode(bodyItems)
            request.httpBody = body
            let preview = String(data: body.prefix(2048), encoding: .utf8) ?? ""
            log.info("‚û°Ô∏è MOVE MIN POST \(apiURL.absoluteString, privacy: .public) items=\(bodyItems.count, privacy: .public) bytes=\(body.count, privacy: .public) preview=\(preview, privacy: .public)")
        } catch {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription, privacy: .public)")
            throw error
        }

        if let authToken = UserDefaults.standard.string(forKey: "auth_token"), !authToken.isEmpty {
            request.setValue("Bearer \(authToken)", forHTTPHeaderField: "Authorization")
            log.debug("üîê –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        } else {
            log.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        }

        log.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å‚Ä¶")
        let (responseData, response) = try await URLSession.shared.data(for: request)

        if let http = response as? HTTPURLResponse {
            log.debug("üì• HTTP –∫–æ–¥: \(http.statusCode)")
            guard (200...299).contains(http.statusCode) else {
                let msg = String(data: responseData, encoding: .utf8) ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                log.error("‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É \(http.statusCode): \(msg, privacy: .public)")
                throw NSError(domain: "MoveAPI", code: http.statusCode,
                              userInfo: [NSLocalizedDescriptionKey: "HTTP \(http.statusCode): \(msg)"])
            }
            log.info("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å")
            if let txt = String(data: responseData, encoding: .utf8) {
                log.debug("üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: \(txt, privacy: .public)")
            }
        } else {
            log.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞")
        }
    }

    // MARK: - Offline cache sync

    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ—Ñ–ª–∞–π–Ω-–∫—ç—à –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:
    /// —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –º–µ—Å—è—Ü–µ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –º–µ—Å—è—Ü –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
    func updateOfflineCache(
        prevPlanned: [Workout],
        updatedMonthPlanned: [Workout],
        movedIDs: [String],
        newDate: Date,
        offlineStore: WorkoutCacheStore
    ) {
        log.info("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ñ–ª–∞–π–Ω –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è‚Ä¶")
        log.debug("üî¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: \(movedIDs.count)")
        log.debug("üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: \(DateUtils.ymd.string(from: newDate), privacy: .public)")

        // –ú–µ—Å—è—Ü—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ø–æ —Å—Ç–∞—Ä—ã–º –¥–∞—Ç–∞–º)
        let sourceMonthKeys = Set(
            prevPlanned
                .filter { movedIDs.contains($0.id) }
                .map { MonthKey.from(date: $0.date) }
        )

        log.debug("üìÇ –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: \(sourceMonthKeys.count)")
        sourceMonthKeys.forEach {
            log.debug("üìÇ –ú–µ—Å—è—Ü-–∏—Å—Ç–æ—á–Ω–∏–∫: \($0.description, privacy: .public)")
        }

        // –ú–µ—Å—è—Ü –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        let destinationMonthKey = MonthKey.from(date: newDate)
        log.debug("üìÇ –ú–µ—Å—è—Ü –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: \(destinationMonthKey.description, privacy: .public)")

        // 1) –£–¥–∞–ª—è–µ–º –∏–∑ –º–µ—Å—è—Ü–µ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        log.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –º–µ—Å—è—Ü–µ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤‚Ä¶")
        var sourceUpdatesCount = 0

        for monthKey in sourceMonthKeys {
            do {
                if var env = try offlineStore.loadMonth(monthKey) {
                    let before = env.workouts.count
                    env.workouts.removeAll { movedIDs.contains($0.id) }
                    let removed = before - env.workouts.count

                    env.fetchedAt = Date()
                    env.etag = nil // –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º etag, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–∂–∞—Ç—å—Å—è –∑–∞ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é

                    try offlineStore.saveMonth(env)
                    sourceUpdatesCount += 1

                    log.debug("‚úÖ –ò–∑ –º–µ—Å—è—Ü–∞ \(monthKey.description, privacy: .public) —É–¥–∞–ª–µ–Ω–æ \(removed) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
                } else {
                    log.debug("‚ö†Ô∏è –ú–µ—Å—è—Ü-–∏—Å—Ç–æ—á–Ω–∏–∫ \(monthKey.description, privacy: .public) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
                }
            } catch {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ \(monthKey.description, privacy: .public): \(error.localizedDescription, privacy: .public)")
            }
        }

        log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—è—Ü–µ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: \(sourceUpdatesCount)")

        // 2) –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ—Å—è—Ü –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–±–µ–∑ –¥—É–±–ª–µ–π –ø–æ ID)
        log.info("üì• –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–µ—Å—è—Ü –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è‚Ä¶")

        let movedCached: [CachedWorkout] = updatedMonthPlanned
            .filter { movedIDs.contains($0.id) }
            .map { w in
                log.debug("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –∫—ç—à–∞: '\(w.name, privacy: .public)' (ID: \(w.id, privacy: .public))")
                return CachedWorkout(
                    id: w.id,
                    name: w.name,
                    date: newDate,
                    durationSec: w.duration,
                    type: w.activityType,
                    updatedAt: Date()
                )
            }

        log.debug("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: \(movedCached.count)")

        do {
            if var dest = try offlineStore.loadMonth(destinationMonthKey) {
                log.debug("üìÇ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Å—è—Ü –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è‚Ä¶")

                let existing = Set(dest.workouts.map(\.id))
                let toAppend = movedCached.filter { !existing.contains($0.id) }

                dest.workouts.append(contentsOf: toAppend)
                dest.fetchedAt = Date()
                dest.etag = nil // —Ç–æ–∂–µ —Å–±—Ä–æ—Å–∏—Ç—å etag

                try offlineStore.saveMonth(dest)
                log.info("‚úÖ –í —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Å—è—Ü –¥–æ–±–∞–≤–ª–µ–Ω–æ \(toAppend.count) –Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
            } else {
                log.debug("üìÇ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–µ—Å—è—Ü –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è‚Ä¶")
                let newEnv = CachedMonthEnvelope(
                    monthKey: destinationMonthKey,
                    fetchedAt: Date(),
                    etag: nil,
                    workouts: movedCached,
                    softDeletedIDs: []
                )
                try offlineStore.saveMonth(newEnv)
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–µ—Å—è—Ü —Å \(movedCached.count) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏")
            }
        } catch {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: \(error.localizedDescription, privacy: .public)")
        }

        log.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    }

    // MARK: - Helpers

    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–π UUID –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "abc|water1" ‚Üí "abc")
    func baseID(from fullID: String) -> String {
        fullID.split(separator: "|", maxSplits: 1).first.map(String.init) ?? fullID
    }
}

// MARK: - Debug helpers

extension Array where Element == String {
    /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Å–∏–≤–∞ ID (–æ–±—ã—á–Ω—ã–µ/–ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–µ)
    func logIDStats(prefix: String = "") {
        let protocolIDs = filter { $0.contains("|") }
        let regularIDs  = filter { !$0.contains("|") }
        log.debug("\(prefix, privacy: .public)üÜî ID —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ \(count), –æ–±—ã—á–Ω—ã—Ö \(regularIDs.count), –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã—Ö \(protocolIDs.count)")
    }
}

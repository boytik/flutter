import SwiftUI
import UIKit

@MainActor
final class ProfileViewModel: ObservableObject {
    // —Ç–æ, —á—Ç–æ —É —Ç–µ–±—è —É–∂–µ –±—ã–ª–æ
    @Published var personalVM: PersonalViewModel
    @Published var showPhotoPicker = false
    @Published var photoSource: PhotoSource? = nil
    @Published var appVersion: String = "1.0.0"

    // –Ω–æ–≤–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @Published var avatar: UIImage? = nil
    @Published var isLoadingAvatar = false

    // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—â—ë –Ω—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–≤ UI –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    @Published var photoURL: URL? = nil

    // –æ—Ñ—Ñ–ª–∞–π–Ω
    private let ns = "user_profile"
    private let kvKeyAvatar = "avatar_image"           // —Ö—Ä–∞–Ω–∏–º Data (jpeg/png)
    private let kvTTLAvatar: TimeInterval = 60 * 60 * 24 // 24 —á–∞—Å–∞

    init() {
        let physicalVM = PhysicalDataViewModel()
        self.personalVM = PersonalViewModel(physicalDataVM: physicalVM)
    }

    /// –ü–æ–¥—Ç—è–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–≤–∞—Ç–∞—Ä:
    /// 1) –æ—Ñ—Ñ–ª–∞–π–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ KV (–µ—Å–ª–∏ –µ—Å—Ç—å)
    /// 2) —Å–≤–µ–∂–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∞–≤–∞—Ç–∞—Ä base64 ‚Üí —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ KV
    func loadUserAndAvatar() {
        isLoadingAvatar = true
        Task {
            defer { isLoadingAvatar = false }

            // 1) –æ—Ñ—Ñ–ª–∞–π–Ω
            if let cached: Data = try? KVStore.shared.get(Data.self, namespace: ns, key: kvKeyAvatar),
               let img = UIImage(data: cached) {
                self.avatar = img
                print("üì¶ KV HIT \(ns)/\(kvKeyAvatar) (\(cached.count) bytes)")
            }

            // 2) —Å–µ—Ç—å
            do {
                let user = try await personalVM.userRepository.getUser()
                if let b64 = user.avatarImageBase64, !b64.isEmpty,
                   let (img, raw) = Self.decodeBase64AvatarAndData(b64) {
                    self.avatar = img
                    try? KVStore.shared.put(raw, namespace: ns, key: kvKeyAvatar, ttl: kvTTLAvatar)
                    print("üíæ KV SAVE \(ns)/\(kvKeyAvatar) (\(raw.count) bytes)")
                } else {
                    self.avatar = nil
                    try? KVStore.shared.delete(namespace: ns, key: kvKeyAvatar)
                }
            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å/–∞–≤–∞—Ç–∞—Ä:", error.localizedDescription)
            }
        }
    }

    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ç–æ: —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–æ–ø—Ü.), –∑–∞–ª–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    func setPhoto(_ image: UIImage) {
        // –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        self.avatar = image

        // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –≤–¥—Ä—É–≥ –Ω—É–∂–Ω–æ –µ—â—ë –≥–¥–µ-—Ç–æ
        if let data = image.jpegData(compressionQuality: 0.8),
           let url = FileManager.default.saveToDocuments(data: data, filename: "profile_photo.jpg") {
            self.photoURL = url
        } else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ")
        }

        // –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω–∞
        Task {
            do {
                try await personalVM.userRepository.uploadAvatar(image)
                print("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

                if let data = image.jpegData(compressionQuality: 0.9) {
                    try? KVStore.shared.put(data, namespace: ns, key: kvKeyAvatar, ttl: kvTTLAvatar)
                    print("üíæ KV SAVE \(ns)/\(kvKeyAvatar) (\(data.count) bytes)")
                }
                // –ø–æ–¥—Ç—è–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                self.loadUserAndAvatar()
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:", error.localizedDescription)
            }
        }
    }

    // MARK: - Helpers

    private static func decodeBase64AvatarAndData(_ raw: String) -> (UIImage, Data)? {
        // –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º data:image/jpeg;base64,
        let pure = raw.contains(",") ? String(raw.split(separator: ",").last!) : raw
        guard let data = Data(base64Encoded: pure, options: .ignoreUnknownCharacters),
              let img = UIImage(data: data) else { return nil }
        return (img, data)
    }

    func clearAvatarOffline() {
        try? KVStore.shared.delete(namespace: ns, key: kvKeyAvatar)
        print("üßπ KV DELETE \(ns)/\(kvKeyAvatar)")
    }
}

enum PhotoSource: Identifiable {
    case camera, gallery
    var id: String { self == .camera ? "camera" : "gallery" }
}

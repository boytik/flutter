
import SwiftUI
import Foundation
import Combine
import UIKit

@MainActor
final class PersonalViewModel: ObservableObject {
    enum Role: String, CaseIterable, Identifiable {
        case user = "User"
        case inspector = "Inspector"
        var id: String { rawValue }

        // —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ç—á–µ–π
        var isInspector: Bool { self == .inspector }
        var serverStrings: [String] { [rawValue, rawValue.lowercased(), rawValue.capitalized] }
    }

    @Published var email: String = ""
    @Published var name: String = ""
    @Published var role: Role = .user

    @Published var selectedImage: UIImage? = nil
    @Published var showImagePicker = false

    @Published var editingField: EditingField? = nil
    @Published var showRolePicker = false
    @Published var showPhysicalDataSheet = false
    @Published var showLogoutAlert = false
    @Published var showOtherActions = false
    @Published var showDeleteConfirmAlert = false

    let physicalDataVM: PhysicalDataViewModel
    let userRepository: UserRepository

    enum EditingField: Identifiable {
        case name
        case email
        var id: Int { hashValue }
    }

    init(userRepository: UserRepository = UserRepositoryImpl(),
         physicalDataVM: PhysicalDataViewModel) {
        self.userRepository = userRepository
        self.physicalDataVM = physicalDataVM

        Task { await loadUser() }
    }

    // MARK: - Data
    @MainActor
    func loadUser() async {
        do {
            let user = try await userRepository.getUser()
            email = user.email
            name  = user.name ?? ""

            // 1) –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º —Ä–æ–ª—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Flutter-–ø–æ–¥—Ö–æ–¥)
            if let saved = UserDefaults.standard.string(forKey: "user_role"),
               let savedRole = Role(rawValue: saved) {
                self.role = savedRole
            } else if let r = user.role?.lowercased(), r == "inspector" {
                // 2) –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–∞—á–Ω—ë—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–æ–ª—å ‚Äî –ø–æ–¥—Ö–≤–∞—Ç–∏–º
                self.role = .inspector
            } else {
                self.role = .user
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ (CalendarView –∏ —Ç.–ø.)
            UserDefaults.standard.set(self.role.rawValue, forKey: "user_role")
        } catch {
            print("‚ùå loadUser error:", error.localizedDescription)
            if email.isEmpty, let local = TokenStorage.shared.currentEmail() {
                email = local
            }
        }
    }


    func saveChanges(for field: EditingField, with newValue: String) async {
        let newEmail = (field == .email) ? newValue : email
        let newName  = (field == .name)  ? newValue : name
        do {
            try await userRepository.updateNameAndEmail(name: newName, email: newEmail)
            email = newEmail
            name  = newName
            editingField = nil
        } catch {
            print("‚ùå updateNameAndEmail error:", error.localizedDescription)
        }
    }

    /// –õ–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–æ–ª—å (–¥–ª—è UI) + ¬´–º—è–≥–∫–æ¬ª –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
    func updateRole(to newRole: Role) async {
        // 1) –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        self.role = newRole
        UserDefaults.standard.set(newRole.rawValue, forKey: "user_role")
        print("üîÅ Local role switched to \(newRole.rawValue)")

        // 2) –ù–ò–ö–ê–ö–ò–• —Å–µ—Ç–µ–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —Ä–æ–≤–Ω–æ —Å–µ–π—á–∞—Å ‚Äî —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç –ø–æ–ª–µ ‚Äî –≤–µ—Ä–Ω—ë–º PATCH –∑–¥–µ—Å—å.
    }


    // MARK: - Session
    func logout() {
        TokenStorage.shared.clear()
        print("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    }

    func deleteAccount() {
        // –ó–∞–≥–ª—É—à–∫–∞. –î–æ–±–∞–≤–∏–º API, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è.
        print("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω (stub)")
    }

    // MARK: - Private: Best-effort PATCH
    private func tryUpdateRoleOnServer(_ role: Role) async {
        guard let email = TokenStorage.shared.currentEmail(), !email.isEmpty else { return }
        let client = HTTPClient.shared

        // /users/<email>
        let url1 = ApiRoutes.Users.update(email: email)
        for body in PatchRolePayload.bodies(for: role) {
            do {
                try await client.requestVoid(url: url1, method: .PATCH, body: body)
                print("‚úÖ Role updated via /users/<email> with \(body.debugName)")
                return
            } catch {
                print("‚Ü©Ô∏è role patch failed (\(body.debugName)): \(error.localizedDescription)")
            }
        }

        // fallback: /user?email=
        let url2 = ApiRoutes.Users.byQuery(email: email)
        for body in PatchRolePayload.bodies(for: role) {
            do {
                try await client.requestVoid(url: url2, method: .PATCH, body: body)
                print("‚úÖ Role updated via /user?email with \(body.debugName)")
                return
            } catch {
                print("‚Ü©Ô∏è role patch (query) failed (\(body.debugName)): \(error.localizedDescription)")
            }
        }
    }
}

// MARK: - –ü–∞–∫–µ—Ç—ã —Ç–µ–ª –¥–ª—è PATCH (–≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π)
private struct PatchRolePayload: Encodable {
    var role: String? = nil
    var user_type: String? = nil
    var is_inspector: Bool? = nil

    var debugName: String {
        if role != nil { return "role" }
        if user_type != nil { return "user_type" }
        if is_inspector != nil { return "is_inspector" }
        return "unknown"
    }

    static func bodies(for role: PersonalViewModel.Role) -> [PatchRolePayload] {
        var arr: [PatchRolePayload] = []
        for s in role.serverStrings { arr.append(.init(role: s)) }       // role
        for s in role.serverStrings { arr.append(.init(user_type: s)) }  // user_type
        arr.append(.init(is_inspector: role.isInspector))                 // is_inspector
        return arr
    }
}
